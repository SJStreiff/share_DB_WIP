plot(ras1)
dat <- '~/Sync/1_Annonaceae/A_prelim_niches/extr_withtaxa_occs.csv'
dat <- read.csv('~/Sync/1_Annonaceae/A_prelim_niches/extr_withtaxa_occs.csv')
dat <- dat[dat$Genus == 'Hornschuchia',]
View(dat)
dat <- dat[dat$Species == 'bryotrophe',]
dat <- dat[,c('latitude', 'longitude')]
plot_ras <- rasterize(dat, ras1)
dat <- dat[,c('longitude', 'latitude')]
plot_ras <- rasterize(dat, ras1)
View(plot_ras)
plot(plot_ras)
library(mapdata)
m <- mapdata::world2HiresMapEnv
plot(m)
library(maps)
map(database = 'world')
points(x = dat$latitude, y = dat$longitude)
points(x = dat$longitude, y = dat$latitude)
map(database = 'world')
points(x = dat$longitude, y = dat$latitude)
points(x = dat$longitude, y = dat$latitude, color = 'red')
library(ggplot2)
library(ggplot2)
p1 <- ggplot() +
geom_map(data = world2HiresMapEnv, aes(x = long, y = lat))
p1 <- ggplot() +
geom_map(data = world2HiresMapEnv, map = world2HiresMapEnv aes(x = long, y = lat))
p1 <- ggplot() +
geom_map(data = world2HiresMapEnv, map = world2HiresMapEnv, aes(x = long, y = lat))
p1 <- ggplot() +
geom_map(data = world2HiresMapEnv, map = WorldData, aes(x = long, y = lat))
m <- map_data('world')
p1 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat))
p1
p1 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, group = group, map_id = region))
p1
p1 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, group = group, map_id = region)) +
geom_point(data = dat, aes(x = longitute, y = latitude))
p1
p1 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, group = group, map_id = region)) +
geom_point(aes(x = dat$longitute, y = dat$latitude))
p1
p1 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, group = group, map_id = region)) +
geom_point(aes(x = dat$longitute, y = dat$latitude), color = 'red')
p1
rlang::last_error()
p1 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, group = group, map_id = region)) +
geom_point(aes(x = dat$longitute, y = dat$latitude), color = 'red')
p1 <- ggplot() +
geom_map(data = m, map = m,  aes(long, lat, map_id = region)) +
#geom_map(data = m, map = m, aes(x = long, y = lat, group = group, map_id = region)) +
geom_point(aes(x = dat$longitute, y = dat$latitude), color = 'red')
p1
library(raster)
dat <- read.csv('~/Sync/1_Annonaceae/A_prelim_niches/extr_withtaxa_occs.csv')
dat <- dat[dat$Genus == 'Hornschuchia',]
dat <- dat[dat$Species == 'bryotrophe',]
dat <- dat[,c('longitude', 'latitude')]
library(maps)
map(database = 'world')
points(x = dat$longitude, y = dat$latitude)
m <- map_data('world')
library(ggplot2)
m <- map_data('world')
p1 <- ggplot() +
geom_map(data = m, map = m,  aes(long, lat, map_id = region)) +
#geom_map(data = m, map = m, aes(x = long, y = lat, group = group, map_id = region)) +
geom_point(aes(x = dat$longitute, y = dat$latitude), color = 'red')
p1 <- ggplot() +
geom_map(data = m)
p1 <- ggplot() +
geom_map(data = m, map = m)
p1
p1 <- ggplot() +
geom_map(data = m, map = m, aes(map_id = regions))
p1
p1 <- ggplot() +
geom_map(data = m, map = m, aes(map_id = region))
p1
p1 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region))
p1
p1 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude))
p1
p1 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red')
p1
p1 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
xlim(-100, 0) +
ylim(-50, 0)
p1
p1 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p1
ras1 <- raster('~/Sync/1_Annonaceae/A_prelim_niches/2_clim_dat/MOD11C3v5.0-CHIRPSv2.0_BIOCLIMS_06m/BIO01.tif')
plot(ras1)
plot_ras <- rasterize(dat, ras1)
ras1[ras1 == -9999] <- NA
plot(ras1)
plot_ras <- rasterize(dat, ras1)
?geom_raster
p2 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
geom_raster(ras1)
p2 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
geom_raster(ras1, aes(x=x, y=y))
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p2 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
geom_raster(ras1, aes(x=x, y=y)) +
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p1
p2
p2 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
geom_raster(ras1, aes(x=x, y=y)) +
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p2 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
geom_tile(ras1, aes(x=x, y=y)) +
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p2
rlang::last_error()
View(ras1)
ras1@data@values
library(wallace)
run_wallace()
library(raster)
dat <- read.csv('~/Sync/1_Annonaceae/A_prelim_niches/extr_withtaxa_occs.csv')
dat <- dat[dat$Genus == 'Hornschuchia',]
dat <- dat[dat$Species == 'bryotrophe',]
dat <- dat[,c('longitude', 'latitude')]
# standard plot
library(maps)
map(database = 'world')
points(x = dat$longitude, y = dat$latitude)
?points
points(x = dat$longitude, y = dat$latitude, col = 'red')
library(ggplot2)
m <- map_data('world')
p1 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p1
ras1 <- raster('~/Sync/1_Annonaceae/A_prelim_niches/2_clim_dat/MOD11C3v5.0-CHIRPSv2.0_BIOCLIMS_06m/BIO01.tif')
ras1[ras1 == -9999] <- NA
plot(ras1)
plot_ras <- rasterize(dat, ras1)
plot(plot_ras)
p2 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
geom_tile(ras1, aes(x=x, y=y)) +
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p2 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
geom_tile(ras1, aes(fill=factor(value))) +
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p2
rlang::last_error()
ras1_df <- as.data.frame(ras1)
p2 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
geom_tile(ras1_df, aes(fill=factor(value))) +
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p2 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
geom_tile(ras1, aes(x = x, y=y, fill=factor(value))) +
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p2 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
geom_tile(ras1, mapping = aes(x = x, y=y, fill=factor(value))) +
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
View(ras1_df)
plot(ras1_df)
ras1_df <- as.data.frame(ras1, xy = TRUE)
p2 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
geom_tile(ras1_df, mapping = aes(x = x, y=y, fill=factor(BIO01))) +
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p2
p2 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
geom_tile(ras1_df, mapping = aes(x = x, y=y)) +
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p2
p2 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
geom_tile(ras1_df, mapping = aes(x = x, y=y, fill = BIO01)) +
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p2
map(database = 'world', xlim = c(-100, 0), ylim = c(-50, 0))
points(x = dat$longitude, y = dat$latitude, col = 'red')
?geom_point
# doing it with ggplot... is very inefficient and very slow slow...
library(ggplot2)
?geom_point
library(raster)
dat <- read.csv('~/Sync/1_Annonaceae/A_prelim_niches/extr_withtaxa_occs.csv')
dat <- dat[dat$Genus == 'Hornschuchia',]
#dat <- dat[dat$Species == 'bryotrophe',]
dat <- dat[,c('longitude', 'latitude')]
# standard plot
library(maps)
map(database = 'world', xlim = c(-100, 0), ylim = c(-50, 0))
points(x = dat$longitude, y = dat$latitude, col = 'red')
# doing it with ggplot... is very inefficient and very slow slow...
library(ggplot2)
m <- map_data('world')
p1 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = group) +
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p1
ras1 <- raster('~/Sync/1_Annonaceae/A_prelim_niches/2_clim_dat/MOD11C3v5.0-CHIRPSv2.0_BIOCLIMS_06m/BIO01.tif')
ras1[ras1 == -9999] <- NA
plot(ras1)
plot_ras <- rasterize(dat, ras1)
plot(plot_ras)
# plotting entire raster layers with ggplot takes a very long time!
ras1_df <- as.data.frame(ras1, xy = TRUE) # for this to work, we need to convert the raster to a dataframe
p2 <- ggplot() +
geom_map(data = m, map = m, aes(x = long, y = lat, map_id = region)) +
geom_point(data = dat, aes(x = longitude, y = latitude), color = 'red') +
geom_tile(ras1_df, mapping = aes(x = x, y=y, fill = BIO01)) + #BIO01 is the name of our layer... if we import a different layer, this changes
xlim(-100, 0) +
ylim(-50, 0) +
xlab(NULL) +
ylab(NULL) +
theme_classic()
p2
package_list <- c('optparse',
'CoordinateCleaner') # or geocodeR etc.
not_installed <- package_list[!(package_list %in% installed.packages()[ , "Package"])]    # Extract not installed packages
if(length(not_installed)) install.packages(not_installed)                               # Install not installed packages
sapply(package_list, require, character.only=TRUE) # load all packages
parser <- OptionParser()
parser <- add_option(parser, c("-v", "--verbose"), action="store_true",
default=TRUE, help="Print extra output [default]")
parser <- add_option(parser, c("--input"), type="string",
help="Input file for coordinate check")
parser <- add_option(parser, "--output", type='string',
help='Output file name')
parse_args(parser)
rm(list = ls())
package_list <- c('optparse',
'CoordinateCleaner') # or geocodeR etc.
not_installed <- package_list[!(package_list %in% installed.packages()[ , "Package"])]    # Extract not installed packages
if(length(not_installed)) install.packages(not_installed)                               # Install not installed packages
sapply(package_list, require, character.only=TRUE) # load all packages
parser <- OptionParser()
parser <- add_option(parser, c("-v", "--verbose"), action="store_true",
default=TRUE, help="Print extra output [default]")
parser <- add_option(parser, c("--input"), type="string",
help="Input file for coordinate check")
parser <- add_option(parser, "--output", type='string',
help='Output file name')
parse_args(parser)
parser$options
parser@options
parser@options$input
parser <- OptionParser()
parser <- add_option(parser, c("input"), type="string",
help="Input file for coordinate check")
parser <- add_option(parser, "output", type='string',
help='Output file name')
parser <- add_option(parser, c("-v", "--verbose"), action="store_true",
default=TRUE, help="Print extra output [default]")
parser <- add_option(parser, c("--input"), type="string",
help="Input file for coordinate check")
parser <- add_option(parser, "--output", type='string',
help='Output file name')
parser <- add_option(parser, c("-v", "--verbose"), action="store_true",
default=TRUE, help="Print extra output [default]")
parse_args(parser)
parser@options$input
option_list <- list(
make_option(c("--input"), type="string",
help="Input file for coordinate check"),
make_option(parser, "--output", type='string',
help='Output file name'),
make_option(parser, c("-v", "--verbose"), action="store_true",
default=TRUE, help="Print extra output [default]"))
option_list <- list(
make_option(c("--input"), type="string",
help="Input file for coordinate check"),
make_option("--output", type='string',
help='Output file name'),
make_option(c("-v", "--verbose"), action="store_true",
default=TRUE, help="Print extra output [default]"))
parse_args(parser,OptionParser(option_list=option_list))
option_list <- list(
make_option(c("-i","--input"), type="string",
help="Input file for coordinate check"),
make_option("-o", "--output", type='string',
help='Output file name'),
make_option(c("-v", "--verbose"), action="store_true",
default=TRUE, help="Print extra output [default]"))
option_list <- list(
make_option(c("-i","--input"), type="string",
help="Input file for coordinate check"),
make_option(c("-o", "--output"), type='string',
help='Output file name'),
make_option(c("-v", "--verbose"), action="store_true",
default=TRUE, help="Print extra output [default]"))
parse_args(parser,OptionParser(option_list=option_list))
option_list <- list(
make_option(c("-i","--input_file"), type="string",
help="Input file for coordinate check"),
make_option(c("-o", "--output_prefix"), type='string',
help='Output file name'),
make_option(c("-v", "--verbose"), action="store_true",
default=TRUE, help="Print extra output [default]"))
parse_args(parser,OptionParser(option_list=option_list))
option_list <- list(
make_option(c("-i","--input_file"), type="string",
help="Input file for coordinate check"),
make_option(c("-o", "--output_prefix"), type='string',
help='Output file name'),
make_option(c("-v", "--verbose"),
default=TRUE, help="Print extra output [default]"))
opt <- parse_args(parser,OptionParser(option_list=option_list))
option_list <- list(
make_option(c("-n", "--name"), type="character", default=FALSE,
dest="report_name", help="A different name to use for the file"),
make_option(c("-h", "--height"), type="numeric", default=12,
dest = "plot_height", help="Height for plot [default %default]",
metavar="plot_height"),
make_option(c("-w", "--width"), type="numeric", default=10,
dest = "plot_width", help="Width for plot [default %default]",
metavar="plot_width")
)
opt <- parse_args(OptionParser(option_list=option_list), positional_arguments = TRUE)
print(opt)
option_list <- list(
make_option(c("-i", "--input_file"), type="character", default=FALSE,
dest="input_name", help="Filepath of input file"),
make_option(c("-o", "--output"),type="character", default=FALSE,
dest = "output_prefix", help="Output file path including prefix"),
)
option_list <- list(
make_option(c("-i", "--input_file"), type="character", default=FALSE,
dest="input_name", help="Filepath of input file"),
make_option(c("-o", "--output"),type="character", default=FALSE,
dest = "output_prefix", help="Output file path including prefix")
)
opt <- parse_args(OptionParser(option_list=option_list), positional_arguments = TRUE)
print(opt)
dat <- read.csv("~/Sync/1_Annonaceae/share_DB_WIP/2_data_out/G_indo_cleaned.csv", header = TRUE, sep=';')
dat$det_by
dat['country_conf'] =
# remove empty coordinates
dat <- data.frame(dat)
dat['country_conf'] = countrycode(dat$country_id, origin =  'iso2c', destination = 'iso3c')
package_list <- c('optparse',
'CoordinateCleaner') # or geocodeR etc.
not_installed <- package_list[!(package_list %in% installed.packages()[ , "Package"])]    # Extract not installed packages
if(length(not_installed)) install.packages(not_installed)                               # Install not installed packages
sapply(package_list, require, character.only=TRUE) # load all packages
dat['country_conf'] = countrycode(dat$country_id, origin =  'iso2c', destination = 'iso3c')
dat <- read.csv("~/Sync/1_Annonaceae/share_DB_WIP/2_data_out/G_indo_cleaned.csv", header = TRUE, sep=';')
dat$country_iso3
# remove empty coordinates
dat <- data.frame(dat)
flags <- clean_coordinates(x = dat,
lon = "ddlong",
lat = "ddlat",
countries = "country_iso3",
tests = c("capitals", "centroids", "equal","gbif", "institutions",
"zeros", "countries")) # most test are on by default
flags <- clean_coordinates(x = dat,
lon = "ddlong",
lat = "ddlat",
species = 'scientific_name'
countries = "country_iso3",
flags <- clean_coordinates(x = dat,
lon = "ddlong",
lat = "ddlat",
species = 'scientific_name',
countries = "country_iso3",
tests = c("capitals", "centroids", "equal","gbif", "institutions",
"zeros", "countries")) # most test are on by default
package_list <- c('optparse',
'rnaturalearthdata',
'CoordinateCleaner') # or geocodeR etc.
not_installed <- package_list[!(package_list %in% installed.packages()[ , "Package"])]    # Extract not installed packages
if(length(not_installed)) install.packages(not_installed)                               # Install not installed packages
sapply(package_list, require, character.only=TRUE) # load all packages
# argument parsing to launch form command line....
option_list <- list(
make_option(c("-i", "--input"), type="character", default=FALSE,
dest="input_name", help="Filepath of input file"),
make_option(c("-o", "--output"),type="character", default=FALSE,
dest = "output_prefix", help="Output file path including prefix")
)
# opt is the variable holding the arguments
opt <- parse_args(OptionParser(option_list=option_list), positional_arguments = TRUE)
inputfile  <- opt$options$input_name
out_prefix <- opt$options$output_prefix
print('R working!')
# some stats for the log file
print('Working directory:')
getwd()
print('Inputfile:')
print(opt$options$input)
dat <- read.csv(inputfile, header = TRUE, sep = ';')
dat <- read.csv("~/Sync/1_Annonaceae/share_DB_WIP/2_data_out/G_indo_cleaned.csv", header = TRUE, sep=';')
# remove empty coordinates
dat <- data.frame(dat)
flags <- clean_coordinates(x = dat,
lon = "ddlong",
lat = "ddlat",
species = 'scientific_name',
countries = "country_iso3",
tests = c("capitals", "centroids", "equal","gbif", "institutions",
"zeros", "countries")) # most test are on by default1
?write
print(paste('Annotated coordinates are written to', out_file))
library(CoordinateCleaner)
?CoordinateCleaner
setwd("~/Sync/1_Annonaceae/share_DB_WIP/1a_WIP/")
dat <- read.csv(file = "TO_CHECK_G_ID_probl_names.csv", header=TRUE, sep=';' )
unique(dat$barcode)
un_bc <- unique(dat$barcode)
